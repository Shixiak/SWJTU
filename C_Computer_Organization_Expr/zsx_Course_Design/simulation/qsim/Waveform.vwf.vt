// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/19/2024 21:11:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Computer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Computer_vlg_sample_tst(
	clock,
	reset,
	sampler_tx
);
input  clock;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Computer_vlg_check_tst (
	M_address,
	M_data_out,
	overflow,
	q,
	status,
	write_read,
	sampler_rx
);
input [11:0] M_address;
input [7:0] M_data_out;
input  overflow;
input [7:0] q;
input [2:0] status;
input  write_read;
input sampler_rx;

reg [11:0] M_address_expected;
reg [7:0] M_data_out_expected;
reg  overflow_expected;
reg [7:0] q_expected;
reg [2:0] status_expected;
reg  write_read_expected;

reg [11:0] M_address_prev;
reg [7:0] M_data_out_prev;
reg  overflow_prev;
reg [7:0] q_prev;
reg [2:0] status_prev;
reg  write_read_prev;

reg [11:0] M_address_expected_prev;
reg [7:0] M_data_out_expected_prev;
reg  overflow_expected_prev;
reg [7:0] q_expected_prev;
reg [2:0] status_expected_prev;
reg  write_read_expected_prev;

reg [11:0] last_M_address_exp;
reg [7:0] last_M_data_out_exp;
reg  last_overflow_exp;
reg [7:0] last_q_exp;
reg [2:0] last_status_exp;
reg  last_write_read_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	M_address_prev = M_address;
	M_data_out_prev = M_data_out;
	overflow_prev = overflow;
	q_prev = q;
	status_prev = status;
	write_read_prev = write_read;
end

// update expected /o prevs

always @(trigger)
begin
	M_address_expected_prev = M_address_expected;
	M_data_out_expected_prev = M_data_out_expected;
	overflow_expected_prev = overflow_expected;
	q_expected_prev = q_expected;
	status_expected_prev = status_expected;
	write_read_expected_prev = write_read_expected;
end


// expected M_address[ 11 ]
initial
begin
	M_address_expected[11] = 1'bX;
end 
// expected M_address[ 10 ]
initial
begin
	M_address_expected[10] = 1'bX;
end 
// expected M_address[ 9 ]
initial
begin
	M_address_expected[9] = 1'bX;
end 
// expected M_address[ 8 ]
initial
begin
	M_address_expected[8] = 1'bX;
end 
// expected M_address[ 7 ]
initial
begin
	M_address_expected[7] = 1'bX;
end 
// expected M_address[ 6 ]
initial
begin
	M_address_expected[6] = 1'bX;
end 
// expected M_address[ 5 ]
initial
begin
	M_address_expected[5] = 1'bX;
end 
// expected M_address[ 4 ]
initial
begin
	M_address_expected[4] = 1'bX;
end 
// expected M_address[ 3 ]
initial
begin
	M_address_expected[3] = 1'bX;
end 
// expected M_address[ 2 ]
initial
begin
	M_address_expected[2] = 1'bX;
end 
// expected M_address[ 1 ]
initial
begin
	M_address_expected[1] = 1'bX;
end 
// expected M_address[ 0 ]
initial
begin
	M_address_expected[0] = 1'bX;
end 
// expected M_data_out[ 7 ]
initial
begin
	M_data_out_expected[7] = 1'bX;
end 
// expected M_data_out[ 6 ]
initial
begin
	M_data_out_expected[6] = 1'bX;
end 
// expected M_data_out[ 5 ]
initial
begin
	M_data_out_expected[5] = 1'bX;
end 
// expected M_data_out[ 4 ]
initial
begin
	M_data_out_expected[4] = 1'bX;
end 
// expected M_data_out[ 3 ]
initial
begin
	M_data_out_expected[3] = 1'bX;
end 
// expected M_data_out[ 2 ]
initial
begin
	M_data_out_expected[2] = 1'bX;
end 
// expected M_data_out[ 1 ]
initial
begin
	M_data_out_expected[1] = 1'bX;
end 
// expected M_data_out[ 0 ]
initial
begin
	M_data_out_expected[0] = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 
// expected q[ 7 ]
initial
begin
	q_expected[7] = 1'bX;
end 
// expected q[ 6 ]
initial
begin
	q_expected[6] = 1'bX;
end 
// expected q[ 5 ]
initial
begin
	q_expected[5] = 1'bX;
end 
// expected q[ 4 ]
initial
begin
	q_expected[4] = 1'bX;
end 
// expected q[ 3 ]
initial
begin
	q_expected[3] = 1'bX;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'bX;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'bX;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'bX;
end 
// expected status[ 2 ]
initial
begin
	status_expected[2] = 1'bX;
end 
// expected status[ 1 ]
initial
begin
	status_expected[1] = 1'bX;
end 
// expected status[ 0 ]
initial
begin
	status_expected[0] = 1'bX;
end 

// expected write_read
initial
begin
	write_read_expected = 1'bX;
end 
// generate trigger
always @(M_address_expected or M_address or M_data_out_expected or M_data_out or overflow_expected or overflow or q_expected or q or status_expected or status or write_read_expected or write_read)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected M_address = %b | expected M_data_out = %b | expected overflow = %b | expected q = %b | expected status = %b | expected write_read = %b | ",M_address_expected_prev,M_data_out_expected_prev,overflow_expected_prev,q_expected_prev,status_expected_prev,write_read_expected_prev);
	$display("| real M_address = %b | real M_data_out = %b | real overflow = %b | real q = %b | real status = %b | real write_read = %b | ",M_address_prev,M_data_out_prev,overflow_prev,q_prev,status_prev,write_read_prev);
`endif
	if (
		( M_address_expected_prev[0] !== 1'bx ) && ( M_address_prev[0] !== M_address_expected_prev[0] )
		&& ((M_address_expected_prev[0] !== last_M_address_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[0] = M_address_expected_prev[0];
	end
	if (
		( M_address_expected_prev[1] !== 1'bx ) && ( M_address_prev[1] !== M_address_expected_prev[1] )
		&& ((M_address_expected_prev[1] !== last_M_address_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[1] = M_address_expected_prev[1];
	end
	if (
		( M_address_expected_prev[2] !== 1'bx ) && ( M_address_prev[2] !== M_address_expected_prev[2] )
		&& ((M_address_expected_prev[2] !== last_M_address_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[2] = M_address_expected_prev[2];
	end
	if (
		( M_address_expected_prev[3] !== 1'bx ) && ( M_address_prev[3] !== M_address_expected_prev[3] )
		&& ((M_address_expected_prev[3] !== last_M_address_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[3] = M_address_expected_prev[3];
	end
	if (
		( M_address_expected_prev[4] !== 1'bx ) && ( M_address_prev[4] !== M_address_expected_prev[4] )
		&& ((M_address_expected_prev[4] !== last_M_address_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[4] = M_address_expected_prev[4];
	end
	if (
		( M_address_expected_prev[5] !== 1'bx ) && ( M_address_prev[5] !== M_address_expected_prev[5] )
		&& ((M_address_expected_prev[5] !== last_M_address_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[5] = M_address_expected_prev[5];
	end
	if (
		( M_address_expected_prev[6] !== 1'bx ) && ( M_address_prev[6] !== M_address_expected_prev[6] )
		&& ((M_address_expected_prev[6] !== last_M_address_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[6] = M_address_expected_prev[6];
	end
	if (
		( M_address_expected_prev[7] !== 1'bx ) && ( M_address_prev[7] !== M_address_expected_prev[7] )
		&& ((M_address_expected_prev[7] !== last_M_address_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[7] = M_address_expected_prev[7];
	end
	if (
		( M_address_expected_prev[8] !== 1'bx ) && ( M_address_prev[8] !== M_address_expected_prev[8] )
		&& ((M_address_expected_prev[8] !== last_M_address_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[8] = M_address_expected_prev[8];
	end
	if (
		( M_address_expected_prev[9] !== 1'bx ) && ( M_address_prev[9] !== M_address_expected_prev[9] )
		&& ((M_address_expected_prev[9] !== last_M_address_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[9] = M_address_expected_prev[9];
	end
	if (
		( M_address_expected_prev[10] !== 1'bx ) && ( M_address_prev[10] !== M_address_expected_prev[10] )
		&& ((M_address_expected_prev[10] !== last_M_address_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[10] = M_address_expected_prev[10];
	end
	if (
		( M_address_expected_prev[11] !== 1'bx ) && ( M_address_prev[11] !== M_address_expected_prev[11] )
		&& ((M_address_expected_prev[11] !== last_M_address_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_address[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_address_expected_prev);
		$display ("     Real value = %b", M_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_address_exp[11] = M_address_expected_prev[11];
	end
	if (
		( M_data_out_expected_prev[0] !== 1'bx ) && ( M_data_out_prev[0] !== M_data_out_expected_prev[0] )
		&& ((M_data_out_expected_prev[0] !== last_M_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[0] = M_data_out_expected_prev[0];
	end
	if (
		( M_data_out_expected_prev[1] !== 1'bx ) && ( M_data_out_prev[1] !== M_data_out_expected_prev[1] )
		&& ((M_data_out_expected_prev[1] !== last_M_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[1] = M_data_out_expected_prev[1];
	end
	if (
		( M_data_out_expected_prev[2] !== 1'bx ) && ( M_data_out_prev[2] !== M_data_out_expected_prev[2] )
		&& ((M_data_out_expected_prev[2] !== last_M_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[2] = M_data_out_expected_prev[2];
	end
	if (
		( M_data_out_expected_prev[3] !== 1'bx ) && ( M_data_out_prev[3] !== M_data_out_expected_prev[3] )
		&& ((M_data_out_expected_prev[3] !== last_M_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[3] = M_data_out_expected_prev[3];
	end
	if (
		( M_data_out_expected_prev[4] !== 1'bx ) && ( M_data_out_prev[4] !== M_data_out_expected_prev[4] )
		&& ((M_data_out_expected_prev[4] !== last_M_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[4] = M_data_out_expected_prev[4];
	end
	if (
		( M_data_out_expected_prev[5] !== 1'bx ) && ( M_data_out_prev[5] !== M_data_out_expected_prev[5] )
		&& ((M_data_out_expected_prev[5] !== last_M_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[5] = M_data_out_expected_prev[5];
	end
	if (
		( M_data_out_expected_prev[6] !== 1'bx ) && ( M_data_out_prev[6] !== M_data_out_expected_prev[6] )
		&& ((M_data_out_expected_prev[6] !== last_M_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[6] = M_data_out_expected_prev[6];
	end
	if (
		( M_data_out_expected_prev[7] !== 1'bx ) && ( M_data_out_prev[7] !== M_data_out_expected_prev[7] )
		&& ((M_data_out_expected_prev[7] !== last_M_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[7] = M_data_out_expected_prev[7];
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( q_expected_prev[3] !== 1'bx ) && ( q_prev[3] !== q_expected_prev[3] )
		&& ((q_expected_prev[3] !== last_q_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_exp[3] = q_expected_prev[3];
	end
	if (
		( q_expected_prev[4] !== 1'bx ) && ( q_prev[4] !== q_expected_prev[4] )
		&& ((q_expected_prev[4] !== last_q_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_exp[4] = q_expected_prev[4];
	end
	if (
		( q_expected_prev[5] !== 1'bx ) && ( q_prev[5] !== q_expected_prev[5] )
		&& ((q_expected_prev[5] !== last_q_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_exp[5] = q_expected_prev[5];
	end
	if (
		( q_expected_prev[6] !== 1'bx ) && ( q_prev[6] !== q_expected_prev[6] )
		&& ((q_expected_prev[6] !== last_q_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_exp[6] = q_expected_prev[6];
	end
	if (
		( q_expected_prev[7] !== 1'bx ) && ( q_prev[7] !== q_expected_prev[7] )
		&& ((q_expected_prev[7] !== last_q_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_exp[7] = q_expected_prev[7];
	end
	if (
		( status_expected_prev[0] !== 1'bx ) && ( status_prev[0] !== status_expected_prev[0] )
		&& ((status_expected_prev[0] !== last_status_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_status_exp[0] = status_expected_prev[0];
	end
	if (
		( status_expected_prev[1] !== 1'bx ) && ( status_prev[1] !== status_expected_prev[1] )
		&& ((status_expected_prev[1] !== last_status_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_status_exp[1] = status_expected_prev[1];
	end
	if (
		( status_expected_prev[2] !== 1'bx ) && ( status_prev[2] !== status_expected_prev[2] )
		&& ((status_expected_prev[2] !== last_status_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_status_exp[2] = status_expected_prev[2];
	end
	if (
		( write_read_expected_prev !== 1'bx ) && ( write_read_prev !== write_read_expected_prev )
		&& ((write_read_expected_prev !== last_write_read_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_read_expected_prev);
		$display ("     Real value = %b", write_read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_write_read_exp = write_read_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Computer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
// wires                                               
wire [11:0] M_address;
wire [7:0] M_data_out;
wire overflow;
wire [7:0] q;
wire [2:0] status;
wire write_read;

wire sampler;                             

// assign statements (if any)                          
Computer i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.M_address(M_address),
	.M_data_out(M_data_out),
	.overflow(overflow),
	.q(q),
	.reset(reset),
	.status(status),
	.write_read(write_read)
);

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

Computer_vlg_sample_tst tb_sample (
	.clock(clock),
	.reset(reset),
	.sampler_tx(sampler)
);

Computer_vlg_check_tst tb_out(
	.M_address(M_address),
	.M_data_out(M_data_out),
	.overflow(overflow),
	.q(q),
	.status(status),
	.write_read(write_read),
	.sampler_rx(sampler)
);
endmodule

